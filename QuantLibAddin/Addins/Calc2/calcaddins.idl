/*	
    Roland Lichters, 2009

    Simple Calc add-in example in C++

    Based on: 
    http://wiki.services.openoffice.org/wiki/Calc/Add-In/Simple_Calc_Add-In
    http://wiki.services.openoffice.org/wiki/CompleteAddIn
*/

#ifndef ORG_OPENOFFICE_SHEET_ADDIN_XCALCADDIN_IDL
#define ORG_OPENOFFICE_SHEET_ADDIN_XCALCADDIN_IDL

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/XInitialization.idl>
#include <com/sun/star/lang/XServiceName.idl>
#include <com/sun/star/lang/XLocalizable.idl>
#include <com/sun/star/sheet/XAddIn.idl>

module quantlib {

  interface XCalcAddins {

    // basic examples

    long methodOne();
    long methodTwo([in] long intDummy);
    double methodThree([in] long intDummy, [in] double doubleDummy);
    double methodFour([in] double m);
    sequence<sequence<long > > 
    methodFive([in] sequence<sequence<long > > aValList);

    // logging

    string ohSetLogFile([in] string LogFileName,
			[in] any LogLevel,
			[in] any Trigger);

    // utilities

    string qlVersion([in] any Trigger);

    string qlAddinVersion([in] any Trigger);
    
    string ohVersion([in] any Trigger);

    // exercise

    string qlEuropeanExercise([in] string ObjectId,
			      [in] any ExpiryDate,
			      [in] any Permanent,
			      [in] any Trigger,
			      [in] long Overwrite);

    // instruments

    double qlInstrumentNPV([in] string ObjectId,
			   [in] any Trigger);

    long qlInstrumentSetPricingEngine([in] string ObjectId,
				      [in] string PricingEngine,
				      [in] any Trigger);

    // options

    string qlVanillaOption([in] string ObjectId,
			   [in] string Payoff,
			   [in] string Exercise,
			   [in] any Permanent,
			   [in] any Trigger,
			   [in] long Overwrite);

    // payoffs

    string qlStrikedTypePayoff([in] string ObjectId,
			       [in] string PayoffID,
			       [in] string OptionType,
			       [in] double Strike,
			       [in] any ThirdParameter,
			       [in] any Permanent,
			       [in] any Trigger,
			       [in] long Overwrite);

    // pricingengines

    string qlPricingEngine([in] string ObjectId,
			   [in] string EngineID,
			   [in] string ProcessID,
			   [in] any Permanent,
			   [in] any Trigger,
			   [in] long Overwrite);

    // processes

    string qlGeneralizedBlackScholesProcess([in] string ObjectId,
					    [in] string BlackVolID,
					    [in] double Underlying,
					    [in] any DayCounter,
					    [in] any SettlementDate,
					    [in] double RiskFreeRate,
					    [in] double DividendYield,
					    [in] any Permanent,
					    [in] any Trigger,
					    [in] long Overwrite);

    // settings

    long qlSettingsEvaluationDate([in] any Trigger);
    
    long qlSettingsSetEvaluationDate([in] any EvalDate,
				     [in] any Trigger);

    // volatilities

    string qlBlackConstantVol([in] string ObjectId,
			      [in] any SettlementDate,
			      [in] string Calendar,
			      [in] double Volatility,
			      [in] any DayCounter,
			      [in] any Permanent,
			      [in] any Trigger,
			      [in] long Overwrite);
  };

  service CalcAddins {
    interface XCalcAddins;
    interface com::sun::star::lang::XInitialization;
    interface com::sun::star::lang::XServiceName;
    interface com::sun::star::sheet::XAddIn;           
  };

};

#endif

