/*! \page extending Extending QuantLibAddin

<p>This document explains how to add new functionality to QuantLibAddin.  QuantLibAddin functions are categorized into groups, the two sections below explain how to create a new group and how to add a new function to a group.  The explanation follows an example where new group <b>Instruments</b> is created with new function <b>QL_BOND_FIXED_COUPON</b>.</p>

<p>The steps below call for creating new files in the library, when the instructions then say "add new file xxx to project workspaces", this means to update all project workspaces supported by QuantLibAddin - currently MSDEV 6/7/8, Borland, and Mingw - to reflect the existence of the new file.  For autoconf, the Makefile.am file in the current directory must also be updated.</p>

<h1>Creating New Groups</h1>

<h2>Autogen</h2>
<ul>
<li>create file</li>
<pre>
	QuantLibAddin/Autogen/instruments.xml
</pre>
<li>add any new function definitions to the file</li>
<li>add the file to project workspaces</li>
<li>run autogeneration to generate new source files</li>
</ul>

<h2>Addins (C, Excel, Calc)</h2>
<ul>
<li>update project workspaces to pick up the new autogenerated files</li>
</ul>
<p>NB: Autogenerated files are not maintained in CVS, but are shipped with releases</p>

<h2>Clients (C/C++)</h2>
<ul>
<li>create new workspaces for standalone client programs.  For example, for the new instruments group, the new MSDEV 6 project workspaces are</li>
<pre>
	QuantLibAddin/Clients/C/ClientCInstruments.dsp
	QuantLibAddin/Clients/C++/ClientCPPInstruments.dsp
</pre>
<li>Create the new standalone programs, e.g.</li>
<pre>
	QuantLibAddin/Clients/C/instruments.c
	QuantLibAddin/Clients/C++/instruments.cpp
</pre>
</ul>

<h2>Clients (Excel/Calc)</h2>
<ul>
<li>Create new spreadsheets for the group, e.g.</li>
<pre>
	QuantLibAddin/Clients/Excel/instruments.xls
	QuantLibAddin/Clients/Calc/instruments.sxc
</pre>
</ul>

<h1>Creating New Functions</h1>

<h2>QuantLibAddin</h2>
<p>Add a new class, descended from Object, wrapping the QuantLib class which you wish to add to QuantLibAddin.  In this example, we create new files ...</p>
<pre>
	QuantLibAddin/qla/fixedcouponbond.cpp
	QuantLibAddin/qla/fixedcouponbond.hpp
</pre>
<p>... and implement new class FixedCouponBond.  Workspaces for the core QuantLibAddin project must be updated to pick up the new files.</p>

<h2>Clients/C++</h2>
<p>As QuantLibAddin is itself a C++ Addin which can be loaded directly to standalone C++ client applications, it's best to test the new functionality in a standalone program before autogenerating the source for the spreadsheets. Edit the file</p>
<pre>
	QuantLibAddin/Clients/C++/instruments.cpp
</pre>
<p>adding some example code to demonstrate the use of the new function.</p>

<h2>Autogen</h2>
<p>Edit file</p>
<pre>
	QuantLibAddin/Autogen/instruments.xml
</pre>
<p>And provide the definition of the new function.  In this example we define function QL_BOND_FIXED_COUPON:</p>

<pre>
<function>
<name>QL_BOND_FIXED_COUPON</name>
<codename>qlBondFixedCoupon</codename>
<desc>construct and return a handle to a FixedCouponBond object</desc>
<qlfunction>FixedCouponBond</qlfunction>
<constructor>true</constructor>
<parameters>
    <param>
        <name>issueDate</name>
        <type>long</type>
        <tensorrank>scalar</tensorrank>
        <desc>issue date</desc>
    </param>
    <param>
        <name>datedDate</name>
        <type>long</type>
        <tensorrank>scalar</tensorrank>
        <desc>dated date</desc>
    </param>
    
    ...
    
</parameters>
<returnval>
    <type>propertyvector</type>
    <desc>vector of properties describing Instrument</desc>
</returnval>
</function>
</pre>
</pre>

<p>elements describing the function:</p>
<ul>
<li><b>name</b> - this is the name of the new function as it will appear in the Addins, e.g. QL_BOND_FIXED_COUPON</li>
<li><b>codename</b> - the name of the new function as it will appear in autogenerated addin source code, e.g. qlBondFixedCoupon</li>
<li><b>desc</b> - the description of the function (displayed in spreadsheet help windows) - must not exceed Excel's maximum string length of 255 bytes</li>
<li><b>qlfunction</b> - the name of the new class that you added to QuantLibAddin, e.g. FixedCouponBond</li>
<li><b>constructor</b> - boolean, true indicates that the function constructs an Object in the ObjectHandler, false indicates that the function invokes a method of an existing Object (in which case the first parameter of the function must be the handle of the Object to be accessed).</li>
<li><b>parameters</b> - list of parameters to the function</li>
<li><b>returnval</b> - description of the value returned by the function</li>
</ul>
<p>elements describing each function parameter:</p>
<ul>
<li><b>name</b> - the name of the parameter - displayed in spreadsheet help</li>
<li><b>type</b> - the datatype of the parameter - long/double/string</li>
<li><b>tensorrank</b> - whether the input is scalar/vector/matrix</li>
<li><b>desc</b> - a description of the parameter - displayed in spreadsheet help</li>
</ul>
<p>elements describing each function's return value:</p>
<ul>
<li><b>type</b> - the datatype of the return value - for constructors this is usually the propertyvector describing the newly constructed object</li>
<li><b>desc</b> - description of the return value - displayed in spreadsheet help</li>
</ul>

<p>Run Autogen to generate the source for the Addins.</p>

<h2>Addins (C/Excel/Calc)</h2>
<p>Rebuild the Addins.</p>

<h2>Clients (C/Excel/Calc)</h2>
<p>Amend the client files ...</p>
<pre>
	QuantLibAddin/Clients/Excel/instruments.xls
	QuantLibAddin/Clients/Calc/instruments.sxc
	QuantLibAddin/Clients/C/instruments.c
</pre>
<p>... to demonstrate the use of the new function.</p>

*/